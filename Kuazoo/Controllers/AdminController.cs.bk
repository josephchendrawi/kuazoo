using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using com.kuazoo;
using com.kuazoo.Models;
using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;
using Kendo.Mvc;
using CloudinaryDotNet;
using CloudinaryDotNet.Actions;
using System.Configuration;

namespace Kuazoo.Controllers
{
    public class AdminController : Controller
    {
        private CountryService countryservice = new CountryService();
        private MerchantService merchantservice = new MerchantService();
        private InventoryItemService inventoryitemservice = new InventoryItemService();
        private TagService tagservice = new TagService();
        //
        // GET: /Admin/

        public ActionResult Index()
        {
            return View();
        }
        #region merchant
        public ActionResult Merchant()
        {
            if (TempData["msg"] != null)
            {
                ViewBag.msg = TempData["msg"];
            }
            return View();
        }

        public ActionResult Merchant_Read([DataSourceRequest] DataSourceRequest request)
        {
            List<com.kuazoo.Merchant> listmer = merchantservice.GetMerchantList().Result;
            List<MerchantModel> newlistmer = new List<MerchantModel>();
            foreach (var v in listmer)
            {
                newlistmer.Add(new MerchantModel() { MerchantId = v.MerchantId, Name = v.Name, CountryId = v.Country.CountryId, Country = new MasterModel.Country() { CountryId = v.Country.CountryId, CountryName = v.Country.Name }, AddressLine1 = v.AddressLine1, AddressLine2 = v.AddressLine2, CityId = v.City.CityId, City = new MasterModel.City() { CityId = v.City.CityId, CityName = v.City.Name }, PostCode = v.PostCode, ContactNumber = v.ContactNumber, Email = v.Email, Website = v.Website, Facebook = v.Facebook, Latitude = v.Latitude, Longitude = v.Longitude, StatusId = v.Status.StatusId, LastAction = v.LastAction = v.LastAction });
            }
            IEnumerable<MerchantModel> ienuList = newlistmer;
            var result = ienuList.ToDataSourceResult(request);
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public String Merchant_Duplicate(int MerchantId)
        {
            string res = "";
            if (MerchantId != null && MerchantId > 0)
            {
                try
                {
                    Boolean result = merchantservice.DuplicateMerchant(MerchantId).Result;

                    if (result) res = "1";
                    else res = "2";
                }
                catch (Exception ex)
                {
                    res = ex.Message;
                }

            }

            return res;
        }
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult Merchant_Destroy([DataSourceRequest] DataSourceRequest request, MerchantModel Merchant)
        {

            try
            {
                if (Merchant != null)
                {
                    Boolean result = merchantservice.DeleteMerchant(Merchant.MerchantId).Result;

                    if (result) ViewBag.result = "1";
                    else ViewBag.result = "2";
                    ModelState.AddModelError("", ViewBag.result);

                }
            }
            catch (Exception ex)
            {
                ViewBag.result = ex.Message;
                ModelState.AddModelError("", ViewBag.result);
            }

            return Json(ModelState.ToDataSourceResult());
        }

        public ActionResult MerchantAdd()
        {
            return View();
        }

        [HttpPost]
        public ActionResult MerchantAdd(FormCollection collection)
        {
            try
            {
                MerchantModel mv = new MerchantModel();

                com.kuazoo.Merchant mer = new com.kuazoo.Merchant();
                mer.MerchantId = 0;
                mer.Name = collection.Get("Name");
                mer.AddressLine1 = collection.Get("AddressLine1");
                mer.AddressLine2 = collection.Get("AddressLine2");
                com.kuazoo.City city = new com.kuazoo.City();
                city.CityId = Convert.ToInt16(collection.Get("CityDropDown").ToString());
                mer.City = city;
                mer.PostCode = collection.Get("PostCode");
                mer.ContactNumber = collection.Get("ContactNumber");
                mer.Email = collection.Get("Email");
                mer.Website = collection.Get("Website");
                mer.Facebook = collection.Get("Facebook");
                try
                {
                    string coord = collection.Get("TempLatLong");
                    char[] delimChars = { ',' };
                    string[] seperated = coord.Split(delimChars);
                    //check if
                    int length1 = seperated[0].Length;
                    int length2 = seperated[1].Length;
                    mer.Latitude = float.Parse(seperated[0].Substring(1, length1 - 1));
                    mer.Longitude = float.Parse(seperated[1].Substring(0, length2 - 2));
                }
                catch
                {
                    mer.Latitude = 0;
                    mer.Longitude = 0;
                }

                com.kuazoo.Status stat = new com.kuazoo.Status();
                stat.StatusId = (int)MerchantStatus.Premium;
                mer.Status = stat;
                bool result = merchantservice.CreateMerchant(mer).Result;
                ViewBag.result = "3";
                if (result == true)
                {
                    ViewBag.result = "1";
                }
                TempData["msg"] = ViewBag.result;
                return RedirectToAction("Merchant", "Admin");
            }
            catch (Exception ex)
            {
                ViewBag.result = ex.Message;
                return View();
            }
        }

        public ActionResult MerchantEdit(int MerchantId)
        {
            com.kuazoo.Merchant v = merchantservice.GetMerchantById(MerchantId).Result;
            MerchantModel merchant = new MerchantModel() { MerchantId = v.MerchantId, Name = v.Name, CountryId = v.Country.CountryId, Country = new MasterModel.Country() { CountryId = v.Country.CountryId, CountryName = v.Country.Name }, AddressLine1 = v.AddressLine1, AddressLine2 = v.AddressLine2,  CityId = v.City.CityId, City = new MasterModel.City() { CityId = v.City.CityId, CityName = v.City.Name }, PostCode = v.PostCode, ContactNumber = v.ContactNumber, Email = v.Email, Website = v.Website, Facebook = v.Facebook, Latitude = v.Latitude, Longitude = v.Longitude, StatusId = v.Status.StatusId, LastAction = v.LastAction = v.LastAction };
            return View(merchant);
        }
        [HttpPost]
        public ActionResult MerchantEdit(FormCollection collection,MerchantModel Merchant)
        {
            try
            {
                com.kuazoo.Merchant mer = new com.kuazoo.Merchant();
                mer.MerchantId = Merchant.MerchantId;
                mer.Name = Merchant.Name;
                mer.AddressLine1 = Merchant.AddressLine1;
                mer.AddressLine2 = Merchant.AddressLine2;
                com.kuazoo.City city = new com.kuazoo.City();
                city.CityId = Merchant.CityId;
                mer.City = city;
                mer.PostCode = Merchant.PostCode;
                mer.ContactNumber = Merchant.ContactNumber;
                mer.Email = Merchant.Email;
                mer.Website = Merchant.Website;
                mer.Facebook = Merchant.Facebook;
                try
                {
                    string coord = collection.Get("TempLatLong");
                    char[] delimChars = { ',' };
                    string[] seperated = coord.Split(delimChars);
                    //check if
                    int length1 = seperated[0].Length;
                    int length2 = seperated[1].Length;
                    mer.Latitude = float.Parse(seperated[0].Substring(1, length1 - 1));
                    mer.Longitude = float.Parse(seperated[1].Substring(0, length2 - 2));
                }
                catch
                {
                    mer.Latitude = 0;
                    mer.Longitude = 0;
                }
                com.kuazoo.Status stat = new com.kuazoo.Status();
                stat.StatusId = Merchant.StatusId;
                mer.Status = stat;
                bool result = merchantservice.CreateMerchant(mer).Result;

                if (result == true)
                {
                    ViewBag.result = "1";
                    TempData["msg"] = "11";
                }
                else
                {
                    ViewBag.result = "3";
                    TempData["msg"] = "33";
                }
                return RedirectToAction("Merchant", "Admin");
            }
            catch (Exception ex)
            {
                ViewBag.result = ex.Message;
            }
            return View(Merchant);
        }
        public ActionResult MerchantView(int MerchantId)
        {
            com.kuazoo.Merchant v = merchantservice.GetMerchantById(MerchantId).Result;
            MerchantModel merchant = new MerchantModel() { MerchantId = v.MerchantId, Name = v.Name, CountryId = v.Country.CountryId, Country = new MasterModel.Country() { CountryId = v.Country.CountryId, CountryName = v.Country.Name }, AddressLine1 = v.AddressLine1, AddressLine2 = v.AddressLine2, CityId = v.City.CityId, City = new MasterModel.City() { CityId = v.City.CityId, CityName = v.City.Name }, PostCode = v.PostCode, ContactNumber = v.ContactNumber, Email = v.Email, Website = v.Website, Facebook = v.Facebook, Latitude = v.Latitude, Longitude = v.Longitude, StatusId = v.Status.StatusId, LastAction = v.LastAction = v.LastAction };
            return View(merchant);
        }
        #endregion

        #region InventoryItem
        public ActionResult InventoryItem()
        {
            //List<com.kuazoo.Tag> listtag = inventoryitemservice.GetTagList().Result;
            //List<InventoryItemModel.Tag> newlisttag = new List<InventoryItemModel.Tag>();
            //foreach (var v in listtag)
            //{
            //    newlisttag.Add(new InventoryItemModel.Tag() { TagId = v.TagId, TagName = v.Name });
            //}
            //ViewData["taglist"] = newlisttag;
            if (TempData["msg"] != null)
            {
                ViewBag.msg = TempData["msg"];
            }
            return View();
        }
        public ActionResult InventoryItem_Read([DataSourceRequest] DataSourceRequest request)
        {
            List<com.kuazoo.InventoryItem> listmer = inventoryitemservice.GetInventoryItemList().Result;
            List<InventoryItemModel.InventoryItem> newlistmer = new List<InventoryItemModel.InventoryItem>();
            foreach (var v in listmer)
            {
                if (v.Prize == null && v.FlashDeal == null)
                {
                    newlistmer.Add(new InventoryItemModel.InventoryItem() { InventoryItemId = v.InventoryItemId, Name = v.Name, Price = v.Price, Description = v.Description, MerchantId = v.Merchant.MerchantId, MerchantName = v.Merchant.Name, CityName = v.Merchant.City.Name, CountryName = v.Merchant.Country.Name, Keyword = v.Keyword, InventoryItemTypeId = v.InventoryItemType.InventoryItemTypeId, InventoryItemTypeName = v.InventoryItemType.InventoryItemTypeName, Discount = v.Discount, ExpireDate = v.ExpireDate, MaximumSales = v.MaximumSales, PublishDate = v.PublishDate, LastAction = v.LastAction, Tag = v.Tag, TagName = v.TagName, ImageName = v.ImageName, ImageUrl = v.ImageUrl, Flag = v.Flag });
                }
                else if (v.Prize == null && v.FlashDeal != null)
                {
                    newlistmer.Add(new InventoryItemModel.InventoryItem() { InventoryItemId = v.InventoryItemId, Name = v.Name, Price = v.Price, Description = v.Description, MerchantId = v.Merchant.MerchantId, MerchantName = v.Merchant.Name, CityName = v.Merchant.City.Name, CountryName = v.Merchant.Country.Name, Keyword = v.Keyword, InventoryItemTypeId = v.InventoryItemType.InventoryItemTypeId, InventoryItemTypeName = v.InventoryItemType.InventoryItemTypeName, Discount = v.Discount, ExpireDate = v.ExpireDate, MaximumSales = v.MaximumSales, PublishDate = v.PublishDate, LastAction = v.LastAction, Tag = v.Tag, TagName = v.TagName, ImageName = v.ImageName, ImageUrl = v.ImageUrl, Flag = v.Flag, FlashDeal = new InventoryItemModel.FlashDeal() { FlashDealId = v.FlashDeal.FlashDealId, Discount = v.FlashDeal.Discount, StartTime = v.FlashDeal.StartTime, EndTime = v.FlashDeal.EndTime, Flag = v.FlashDeal.Flag } });
                }
                else if (v.FlashDeal == null && v.Prize != null)
                {
                    newlistmer.Add(new InventoryItemModel.InventoryItem() { InventoryItemId = v.InventoryItemId, Name = v.Name, Price = v.Price, Description = v.Description, MerchantId = v.Merchant.MerchantId, MerchantName = v.Merchant.Name, CityName = v.Merchant.City.Name, CountryName = v.Merchant.Country.Name, Keyword = v.Keyword, InventoryItemTypeId = v.InventoryItemType.InventoryItemTypeId, InventoryItemTypeName = v.InventoryItemType.InventoryItemTypeName, Discount = v.Discount, ExpireDate = v.ExpireDate, MaximumSales = v.MaximumSales, PublishDate = v.PublishDate, LastAction = v.LastAction, Tag = v.Tag, TagName = v.TagName, ImageName = v.ImageName, ImageUrl = v.ImageUrl, Flag = v.Flag, Prize = new InventoryItemModel.Prize() { PrizeId = v.Prize.PrizeId, Name = v.Prize.Name, Description = v.Prize.Description, ImageName = v.Prize.ImageName, ImageUrl = v.Prize.ImageUrl, Price = v.Prize.Price, SponsorName=v.Prize.SponsorName,Detail =v.Prize.Detail,Terms =v.Prize.Terms } });
                }
                else
                {
                    newlistmer.Add(new InventoryItemModel.InventoryItem() { InventoryItemId = v.InventoryItemId, Name = v.Name, Price = v.Price, Description = v.Description, MerchantId = v.Merchant.MerchantId, MerchantName = v.Merchant.Name, CityName = v.Merchant.City.Name, CountryName = v.Merchant.Country.Name, Keyword = v.Keyword, InventoryItemTypeId = v.InventoryItemType.InventoryItemTypeId, InventoryItemTypeName = v.InventoryItemType.InventoryItemTypeName, Discount = v.Discount, ExpireDate = v.ExpireDate, MaximumSales = v.MaximumSales, PublishDate = v.PublishDate, LastAction = v.LastAction, Tag = v.Tag, TagName = v.TagName, ImageName = v.ImageName, ImageUrl = v.ImageUrl, Flag = v.Flag, FlashDeal = new InventoryItemModel.FlashDeal() { FlashDealId = v.FlashDeal.FlashDealId, Discount = v.FlashDeal.Discount, StartTime = v.FlashDeal.StartTime, EndTime = v.FlashDeal.EndTime, Flag = v.FlashDeal.Flag }, Prize = new InventoryItemModel.Prize() { PrizeId = v.Prize.PrizeId, Name = v.Prize.Name, Description = v.Prize.Description, ImageName = v.Prize.ImageName, ImageUrl = v.Prize.ImageUrl, Price = v.Prize.Price, SponsorName = v.Prize.SponsorName, Detail = v.Prize.Detail, Terms = v.Prize.Terms } });
                }
            }
            IEnumerable<InventoryItemModel.InventoryItem> ienuList = newlistmer;
            var result = ienuList.ToDataSourceResult(request);
            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public String InventoryItem_Duplicate(int InventoryItemId)
        {
            string res = "";
            if (InventoryItemId != null && InventoryItemId>0)
            {
                try
                {
                    Boolean result = inventoryitemservice.DuplicateInventoryItem(InventoryItemId).Result;

                    if (result) res = "1";
                    else res = "2";
                }
                catch (Exception ex)
                {
                    res = ex.Message;
                }

            }

            return res;
        }
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult InventoryItem_Destroy([DataSourceRequest] DataSourceRequest request, InventoryItemModel.InventoryItem InventoryItem)
        {
            if (InventoryItem != null)
            {
                Boolean result = inventoryitemservice.DeleteInventoryItem(InventoryItem.InventoryItemId).Result;

                if (result) ViewBag.result = "1";
                else ViewBag.result = "2";
                ModelState.AddModelError("", ViewBag.result);

            }

            return Json(ModelState.ToDataSourceResult());
        }
        public ActionResult InventoryItemAdd()
        {
            return View();
        }
        [HttpPost]
        public ActionResult InventoryItemAdd(HttpPostedFileBase imageUpload, HttpPostedFileBase imageUploadPrize, FormCollection collection, InventoryItemModel.InventoryItem InventoryItem)
        {
            if (ModelState.IsValid)
            {
                try
                {
                    string imageurl = "";
                    string imageurlprize = "";
                    if (imageUpload != null)
                    {
                        if (!Helper.IsValidImage(imageUpload.FileName))
                        {
                            throw new Exception("File is not an image file");
                        }
                        string name = InventoryItem.Name;
                        if (name == null) name = "";
                        //imageurl = Helper.uploadImage(imageUpload);
                        imageurl = Helper.uploadImageWithName(imageUpload, name);
                    }
                    if (imageUploadPrize != null)
                    {
                        if (!Helper.IsValidImage(imageUploadPrize.FileName))
                        {
                            throw new Exception("File is not an image file");
                        }
                        string name = InventoryItem.Name;
                        if (name == null) name = "";
                        name = "Prize-" + name;
                        //imageurl = Helper.uploadImage(imageUpload);
                        imageurlprize = Helper.uploadImageWithName(imageUploadPrize, name);
                    }
                    com.kuazoo.InventoryItem pro = new com.kuazoo.InventoryItem();
                    pro.InventoryItemId = 0;
                    pro.Name = InventoryItem.Name;
                    com.kuazoo.Currency curr = new com.kuazoo.Currency();
                    pro.Price = InventoryItem.Price;
                    pro.Description = InventoryItem.Description;
                    com.kuazoo.Merchant merchant = new com.kuazoo.Merchant();
                    merchant.MerchantId = InventoryItem.MerchantId;
                    pro.Merchant = merchant;
                    pro.Keyword = InventoryItem.Keyword;
                    com.kuazoo.InventoryItemType InventoryItemtype = new com.kuazoo.InventoryItemType();
                    InventoryItemtype.InventoryItemTypeId = InventoryItem.InventoryItemTypeId;
                    pro.InventoryItemType = InventoryItemtype;
                    pro.Discount = InventoryItem.Discount;
                    pro.ExpireDate = InventoryItem.ExpireDate;
                    pro.MaximumSales = InventoryItem.MaximumSales;
                    pro.PublishDate = InventoryItem.PublishDate;
                    string tag = collection.Get("InventoryItemTagDropDown");
                    if (tag != null || tag != "")
                    {
                        pro.Tag = tag;
                    }
                    pro.ImageName = "";
                    if (imageurl != "")
                    {
                        pro.ImageName = imageurl;
                    }
                    pro.ImageDelete = false;
                    pro.Flag = true;//InventoryItem.Flag;

                    com.kuazoo.Prize pr = new com.kuazoo.Prize();
                    pr.PrizeId = 0;
                    pr.Name = InventoryItem.Prize.Name;
                    pr.Price = InventoryItem.Prize.Price;
                    pr.Description = InventoryItem.Prize.Description;
                    pr.SponsorName = InventoryItem.Prize.SponsorName;
                    pr.Terms = InventoryItem.Prize.Terms;
                    pr.Detail = InventoryItem.Prize.Detail;

                    pr.ImageName = "";
                    if (imageurlprize != "")
                    {
                        pr.ImageName = imageurlprize;
                    }
                    pro.Prize = pr;


                    bool result = inventoryitemservice.CreateInventoryItem(pro).Result;
                    if (result == true)
                    {
                        ViewBag.result = "1";
                    }
                    else
                    {
                        ViewBag.result = "3";
                    }
                    TempData["msg"] = ViewBag.result;
                    return RedirectToAction("InventoryItem", "Admin");
                }
                catch (Exception ex)
                {
                    ViewBag.result = ex.Message;
                }
            }
            return View(InventoryItem);

        }

        public ActionResult InventoryItemEdit(int InventoryItemId)
        {
            com.kuazoo.InventoryItem v = inventoryitemservice.GetInventoryItemById(InventoryItemId).Result;
            InventoryItemModel.InventoryItem InventoryItem;
            if (v.Prize == null && v.FlashDeal == null)
            {
                InventoryItem = new InventoryItemModel.InventoryItem() { InventoryItemId = v.InventoryItemId, Name = v.Name, Price = v.Price, Description = v.Description, MerchantId = v.Merchant.MerchantId, MerchantName = v.Merchant.Name, CityName = v.Merchant.City.Name, CountryName = v.Merchant.Country.Name, Keyword = v.Keyword, InventoryItemTypeId = v.InventoryItemType.InventoryItemTypeId, InventoryItemTypeName = v.InventoryItemType.InventoryItemTypeName, Discount = v.Discount, ExpireDate = v.ExpireDate, MaximumSales = v.MaximumSales, PublishDate = v.PublishDate, LastAction = v.LastAction, Tag = v.Tag, TagName = v.TagName, ImageName = v.ImageName, ImageUrl = v.ImageUrl, Flag = v.Flag };
            }
            else if (v.Prize == null && v.FlashDeal != null)
            {
                InventoryItem = new InventoryItemModel.InventoryItem() { InventoryItemId = v.InventoryItemId, Name = v.Name, Price = v.Price, Description = v.Description, MerchantId = v.Merchant.MerchantId, MerchantName = v.Merchant.Name, CityName = v.Merchant.City.Name, CountryName = v.Merchant.Country.Name, Keyword = v.Keyword, InventoryItemTypeId = v.InventoryItemType.InventoryItemTypeId, InventoryItemTypeName = v.InventoryItemType.InventoryItemTypeName, Discount = v.Discount, ExpireDate = v.ExpireDate, MaximumSales = v.MaximumSales, PublishDate = v.PublishDate, LastAction = v.LastAction, Tag = v.Tag, TagName = v.TagName, ImageName = v.ImageName, ImageUrl = v.ImageUrl, Flag = v.Flag, FlashDeal = new InventoryItemModel.FlashDeal() { FlashDealId = v.FlashDeal.FlashDealId, Discount = v.FlashDeal.Discount, StartTime = v.FlashDeal.StartTime, EndTime = v.FlashDeal.EndTime, Flag = v.FlashDeal.Flag } };
            }
            else if (v.FlashDeal == null && v.Prize != null)
            {
                InventoryItem = new InventoryItemModel.InventoryItem() { InventoryItemId = v.InventoryItemId, Name = v.Name, Price = v.Price, Description = v.Description, MerchantId = v.Merchant.MerchantId, MerchantName = v.Merchant.Name, CityName = v.Merchant.City.Name, CountryName = v.Merchant.Country.Name, Keyword = v.Keyword, InventoryItemTypeId = v.InventoryItemType.InventoryItemTypeId, InventoryItemTypeName = v.InventoryItemType.InventoryItemTypeName, Discount = v.Discount, ExpireDate = v.ExpireDate, MaximumSales = v.MaximumSales, PublishDate = v.PublishDate, LastAction = v.LastAction, Tag = v.Tag, TagName = v.TagName, ImageName = v.ImageName, ImageUrl = v.ImageUrl, Flag = v.Flag, Prize = new InventoryItemModel.Prize() { PrizeId = v.Prize.PrizeId, Name = v.Prize.Name, Description = v.Prize.Description, ImageName = v.Prize.ImageName, ImageUrl = v.Prize.ImageUrl, Price = v.Prize.Price, SponsorName = v.Prize.SponsorName, Detail = v.Prize.Detail, Terms = v.Prize.Terms } };
            }
            else
            {
                InventoryItem = new InventoryItemModel.InventoryItem() { InventoryItemId = v.InventoryItemId, Name = v.Name, Price = v.Price, Description = v.Description, MerchantId = v.Merchant.MerchantId, MerchantName = v.Merchant.Name, CityName = v.Merchant.City.Name, CountryName = v.Merchant.Country.Name, Keyword = v.Keyword, InventoryItemTypeId = v.InventoryItemType.InventoryItemTypeId, InventoryItemTypeName = v.InventoryItemType.InventoryItemTypeName, Discount = v.Discount, ExpireDate = v.ExpireDate, MaximumSales = v.MaximumSales, PublishDate = v.PublishDate, Tag = v.Tag, TagName = v.TagName, ImageName = v.ImageName, ImageUrl = v.ImageUrl, Flag = v.Flag, FlashDeal = new InventoryItemModel.FlashDeal() { FlashDealId = v.FlashDeal.FlashDealId, Discount = v.FlashDeal.Discount, StartTime = v.FlashDeal.StartTime, EndTime = v.FlashDeal.EndTime, Flag = v.FlashDeal.Flag }, Prize = new InventoryItemModel.Prize() { PrizeId = v.Prize.PrizeId, Name = v.Prize.Name, Description = v.Prize.Description, ImageName = v.Prize.ImageName, ImageUrl = v.Prize.ImageUrl, Price = v.Prize.Price, SponsorName = v.Prize.SponsorName, Detail = v.Prize.Detail, Terms = v.Prize.Terms } };
            }
            return View(InventoryItem);
        }
        [HttpPost]
        public ActionResult InventoryItemEdit(HttpPostedFileBase imageUpload,HttpPostedFileBase imageUploadPrize, FormCollection collection, InventoryItemModel.InventoryItem InventoryItem)
        {
   
            if (ModelState.IsValid)
            {
                try
                {

                    string imageurl = "";
                    string imageurlprize = "";
                    if (imageUpload != null)
                    {
                        if (!Helper.IsValidImage(imageUpload.FileName))
                        {
                            throw new Exception("File is not an image file");
                        }
                        string name = InventoryItem.Name;
                        if (name == null) name = "";
                        //imageurl = Helper.uploadImage(imageUpload);
                        imageurl = Helper.uploadImageWithName(imageUpload, name);
                    }
                    if (imageUploadPrize != null)
                    {
                        if (!Helper.IsValidImage(imageUploadPrize.FileName))
                        {
                            throw new Exception("File is not an image file");
                        }
                        string name = InventoryItem.Name;
                        if (name == null) name = "";
                        name = "Prize-" + name;
                        //imageurl = Helper.uploadImage(imageUpload);
                        imageurlprize = Helper.uploadImageWithName(imageUploadPrize, name);
                    }
                    com.kuazoo.InventoryItem pro = new com.kuazoo.InventoryItem();
                    pro.InventoryItemId = InventoryItem.InventoryItemId;
                    pro.Name = InventoryItem.Name;
                    com.kuazoo.Currency curr = new com.kuazoo.Currency();
                    pro.Price = InventoryItem.Price;
                    pro.Description = InventoryItem.Description;
                    com.kuazoo.Merchant merchant = new com.kuazoo.Merchant();
                    merchant.MerchantId = InventoryItem.MerchantId;
                    pro.Merchant = merchant;
                    pro.Keyword = InventoryItem.Keyword;
                    com.kuazoo.InventoryItemType InventoryItemtype = new com.kuazoo.InventoryItemType();
                    InventoryItemtype.InventoryItemTypeId = InventoryItem.InventoryItemTypeId;
                    pro.InventoryItemType = InventoryItemtype;
                    pro.Discount = InventoryItem.Discount;
                    pro.ExpireDate = InventoryItem.ExpireDate;
                    pro.MaximumSales = InventoryItem.MaximumSales;
                    pro.PublishDate = InventoryItem.PublishDate;
                    pro.Tag = InventoryItem.Tag;
                    pro.ImageName = InventoryItem.ImageName;
                    pro.ImageUrl = InventoryItem.ImageUrl;
                    if (imageurl != "")
                    {
                        pro.ImageName = imageurl;
                    }
                    pro.ImageDelete = false;
                    string deleteimg = collection.Get("flagDeleteImage");
                    if (deleteimg != null || deleteimg != "")
                    {
                        if (deleteimg == "1")
                        {
                            pro.ImageDelete = true;
                        }
                    }
                    string tag = collection.Get("InventoryItemTagDropDown");
                    if (tag != null || tag != "")
                    {
                        pro.Tag = tag;
                    }
                    pro.Flag = InventoryItem.Flag;


                    string _submit = collection.Get("_submit");
                    if (_submit == "0")
                    {
                        com.kuazoo.FlashDeal fd = new com.kuazoo.FlashDeal();
                        fd.FlashDealId = InventoryItem.FlashDeal.FlashDealId;
                        fd.Discount = InventoryItem.FlashDeal.Discount;
                        fd.StartTime = InventoryItem.FlashDeal.StartTime;
                        fd.EndTime = InventoryItem.FlashDeal.EndTime;
                        fd.Flag = InventoryItem.FlashDeal.Flag;

                        pro.FlashDeal = fd;
                    }

                    com.kuazoo.Prize pr = new com.kuazoo.Prize();
                    pr.PrizeId = InventoryItem.Prize.PrizeId;
                    pr.Name = InventoryItem.Prize.Name;
                    pr.Price = InventoryItem.Prize.Price;
                    pr.Description = InventoryItem.Prize.Description;
                    pr.SponsorName = InventoryItem.Prize.SponsorName;
                    pr.Terms = InventoryItem.Prize.Terms;
                    pr.Detail = InventoryItem.Prize.Detail;
                    pr.ImageName = "";
                    if (imageurlprize != "")
                    {
                        pr.ImageName = imageurlprize;
                    }

                    string deleteimgprize = collection.Get("flagDeleteImagePrize");
                    if (deleteimgprize != null || deleteimgprize != "")
                    {
                        if (deleteimgprize == "1")
                        {
                            pr.ImageName = "";
                        }
                    }

                    pro.Prize = pr;

                    bool result = inventoryitemservice.CreateInventoryItem(pro).Result;

                    if (result == true)
                    {
                        ViewBag.result = "1";
                        TempData["msg"] = "11";
                    }
                    else
                    {
                        ViewBag.result = "3";
                        TempData["msg"] = "33";
                    }
                    return RedirectToAction("InventoryItem", "Admin");
                }
                catch (Exception ex)
                {
                    ViewBag.result = ex.Message;
                }
            }
            return View(InventoryItem);

        }

        public ActionResult InventoryItemView(int InventoryItemId)
        {
            com.kuazoo.InventoryItem v = inventoryitemservice.GetInventoryItemById(InventoryItemId).Result;
            InventoryItemModel.InventoryItem InventoryItem;
            if (v.Prize == null && v.FlashDeal == null)
            {
                InventoryItem = new InventoryItemModel.InventoryItem() { InventoryItemId = v.InventoryItemId, Name = v.Name, Price = v.Price, Description = v.Description, MerchantId = v.Merchant.MerchantId, MerchantName = v.Merchant.Name, CityName = v.Merchant.City.Name, CountryName = v.Merchant.Country.Name, Keyword = v.Keyword, InventoryItemTypeId = v.InventoryItemType.InventoryItemTypeId, InventoryItemTypeName = v.InventoryItemType.InventoryItemTypeName, Discount = v.Discount, ExpireDate = v.ExpireDate, MaximumSales = v.MaximumSales, PublishDate = v.PublishDate, LastAction = v.LastAction, Tag = v.Tag, TagName = v.TagName, ImageName = v.ImageName, ImageUrl = v.ImageUrl, Flag = v.Flag };
            }
            else if (v.Prize == null && v.FlashDeal != null)
            {
                InventoryItem = new InventoryItemModel.InventoryItem() { InventoryItemId = v.InventoryItemId, Name = v.Name, Price = v.Price, Description = v.Description, MerchantId = v.Merchant.MerchantId, MerchantName = v.Merchant.Name, CityName = v.Merchant.City.Name, CountryName = v.Merchant.Country.Name, Keyword = v.Keyword, InventoryItemTypeId = v.InventoryItemType.InventoryItemTypeId, InventoryItemTypeName = v.InventoryItemType.InventoryItemTypeName, Discount = v.Discount, ExpireDate = v.ExpireDate, MaximumSales = v.MaximumSales, PublishDate = v.PublishDate, LastAction = v.LastAction, Tag = v.Tag, TagName = v.TagName, ImageName = v.ImageName, ImageUrl = v.ImageUrl, Flag = v.Flag, FlashDeal = new InventoryItemModel.FlashDeal() { FlashDealId = v.FlashDeal.FlashDealId, Discount = v.FlashDeal.Discount, StartTime = v.FlashDeal.StartTime, EndTime = v.FlashDeal.EndTime, Flag = v.FlashDeal.Flag } };
            }
            else if (v.FlashDeal == null && v.Prize != null)
            {
                InventoryItem = new InventoryItemModel.InventoryItem() { InventoryItemId = v.InventoryItemId, Name = v.Name, Price = v.Price, Description = v.Description, MerchantId = v.Merchant.MerchantId, MerchantName = v.Merchant.Name, CityName = v.Merchant.City.Name, CountryName = v.Merchant.Country.Name, Keyword = v.Keyword, InventoryItemTypeId = v.InventoryItemType.InventoryItemTypeId, InventoryItemTypeName = v.InventoryItemType.InventoryItemTypeName, Discount = v.Discount, ExpireDate = v.ExpireDate, MaximumSales = v.MaximumSales, PublishDate = v.PublishDate, LastAction = v.LastAction, Tag = v.Tag, TagName = v.TagName, ImageName = v.ImageName, ImageUrl = v.ImageUrl, Flag = v.Flag, Prize = new InventoryItemModel.Prize() { PrizeId = v.Prize.PrizeId, Name = v.Prize.Name, Description = v.Prize.Description, ImageName = v.Prize.ImageName, ImageUrl = v.Prize.ImageUrl, Price = v.Prize.Price, SponsorName = v.Prize.SponsorName, Detail = v.Prize.Detail, Terms = v.Prize.Terms } };
            }
            else
            {
                InventoryItem = new InventoryItemModel.InventoryItem() { InventoryItemId = v.InventoryItemId, Name = v.Name, Price = v.Price, Description = v.Description, MerchantId = v.Merchant.MerchantId, MerchantName = v.Merchant.Name, CityName = v.Merchant.City.Name, CountryName = v.Merchant.Country.Name, Keyword = v.Keyword, InventoryItemTypeId = v.InventoryItemType.InventoryItemTypeId, InventoryItemTypeName = v.InventoryItemType.InventoryItemTypeName, Discount = v.Discount, ExpireDate = v.ExpireDate, MaximumSales = v.MaximumSales, PublishDate = v.PublishDate, Tag = v.Tag, TagName = v.TagName, ImageName = v.ImageName, ImageUrl = v.ImageUrl, Flag = v.Flag, FlashDeal = new InventoryItemModel.FlashDeal() { FlashDealId = v.FlashDeal.FlashDealId, Discount = v.FlashDeal.Discount, StartTime = v.FlashDeal.StartTime, EndTime = v.FlashDeal.EndTime, Flag = v.FlashDeal.Flag }, Prize = new InventoryItemModel.Prize() { PrizeId = v.Prize.PrizeId, Name = v.Prize.Name, Description = v.Prize.Description, ImageName = v.Prize.ImageName, ImageUrl = v.Prize.ImageUrl, Price = v.Prize.Price, SponsorName = v.Prize.SponsorName, Detail = v.Prize.Detail, Terms = v.Prize.Terms } };
            }
            return View(InventoryItem);
        }
        #endregion

        #region tag
        public ActionResult Tag()
        {
            List<com.kuazoo.Tag> listtag = tagservice.GetTagList().Result;
            List<InventoryItemModel.Tag> newlisttag = new List<InventoryItemModel.Tag>();
            foreach (var v in listtag)
            {
                newlisttag.Add(new InventoryItemModel.Tag() { TagId = v.TagId, TagName = v.Name });
            }
            if (TempData["msg"] != null)
            {
                ViewBag.msg = TempData["msg"];
            }
            ViewData["taglist"] = newlisttag;
            return View();
        }
        public ActionResult Tag_Read([DataSourceRequest] DataSourceRequest request)
        {
            List<com.kuazoo.Tag> listmer = tagservice.GetTagList().Result;
            List<InventoryItemModel.Tag> newlistmer = new List<InventoryItemModel.Tag>();
            foreach (var v in listmer)
            {
                newlistmer.Add(new InventoryItemModel.Tag() { TagId = v.TagId, TagName = v.Name, ShowAsCategory = v.ShowAsCategory, ParentId = v.Parent != null ? v.Parent.TagId : 0, ParentName =  v.Parent != null ? v.Parent.Name : "", LastAction = v.LastAction });
            }
            IEnumerable<InventoryItemModel.Tag> ienuList = newlistmer;
            var result = ienuList.ToDataSourceResult(request);
            return Json(result, JsonRequestBehavior.AllowGet);
        }
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult Tag_Destroy([DataSourceRequest] DataSourceRequest request, InventoryItemModel.Tag Tag)
        {
            if (Tag != null)
            {
                Boolean result = tagservice.DeleteTag(Tag.TagId).Result;

                if (result) ViewBag.result = "1";
                else ViewBag.result = "2";
                ModelState.AddModelError("", ViewBag.result);

            }

            return Json(ModelState.ToDataSourceResult());
        }

        public ActionResult TagAdd()
        {
            return View();
        }
        [HttpPost]
        public ActionResult TagAdd(InventoryItemModel.Tag Tag)
        {
            if (ModelState.IsValid)
            {
                try
                {
                    com.kuazoo.Tag pro = new com.kuazoo.Tag();
                    pro.TagId = 0;
                    pro.Name = Tag.TagName;
                    if (Tag.ParentId != null)
                    {
                        Tag parent = new Tag();
                        parent.TagId = (int)Tag.ParentId;
                        pro.Parent = parent;
                    }
                    else
                    {
                        pro.Parent = null;
                    }
                    pro.ShowAsCategory = Tag.ShowAsCategory;

                    bool result = tagservice.CreateTag(pro).Result;
                    if (result == true)
                    {
                        ViewBag.result = "1";
                    }
                    else
                    {
                        ViewBag.result = "3";
                    }

                    TempData["msg"] = ViewBag.result;
                    return RedirectToAction("Tag", "Admin");
                }
                catch (Exception ex)
                {
                    ViewBag.result = ex.Message;
                }
            }
            return View(Tag);

        }
        public ActionResult TagEdit(int TagId)
        {
            com.kuazoo.Tag v = tagservice.GetTagById(TagId).Result;
            InventoryItemModel.Tag InventoryItem = new InventoryItemModel.Tag() { TagId = v.TagId, TagName = v.Name, ShowAsCategory = v.ShowAsCategory, ParentId = v.Parent != null ? v.Parent.TagId : 0, ParentName = v.Parent != null ? v.Parent.Name : "", LastAction = v.LastAction };
            return View(InventoryItem);
        }
        [HttpPost]
        public ActionResult TagEdit(InventoryItemModel.Tag Tag)
        {
            if (ModelState.IsValid)
            {
                try
                {
                    com.kuazoo.Tag pro = new com.kuazoo.Tag();
                    pro.TagId = Tag.TagId;
                    pro.Name = Tag.TagName;
                    if (Tag.ParentId != null)
                    {
                        Tag parent = new Tag();
                        parent.TagId = (int)Tag.ParentId;
                        pro.Parent = parent;
                    }
                    else
                    {
                        pro.Parent = null;
                    }
                    pro.ShowAsCategory = Tag.ShowAsCategory;

                    bool result = tagservice.CreateTag(pro).Result;
                    if (result == true)
                    {
                        ViewBag.result = "1";
                        TempData["msg"] = "11";
                    }
                    else
                    {
                        ViewBag.result = "3";
                        TempData["msg"] = "33";
                    }
                    return RedirectToAction("Tag", "Admin");
                }
                catch (Exception ex)
                {
                    ViewBag.result = ex.Message;
                }
            }
            return View(Tag);

        }
        public ActionResult TagView(int TagId)
        {
            com.kuazoo.Tag v = tagservice.GetTagById(TagId).Result;
            InventoryItemModel.Tag InventoryItem = new InventoryItemModel.Tag() { TagId = v.TagId, TagName = v.Name, ShowAsCategory = v.ShowAsCategory, ParentId = v.Parent != null ? v.Parent.TagId : 0, ParentName = v.Parent != null ? v.Parent.Name : "", LastAction = v.LastAction };
            return View(InventoryItem);
        }
        #endregion

        #region jsonlist
        public JsonResult CountryList()
        {
            List<com.kuazoo.Country> listc = countryservice.GetCountryList().Result;
            List<MasterModel.Country> newlistcat = new List<MasterModel.Country>();
            foreach (var v in listc)
            {
                newlistcat.Add(new MasterModel.Country() { CountryId = v.CountryId, CountryName = v.Name });
            }
            IEnumerable<MasterModel.Country> ienuList = newlistcat;
            return Json(ienuList, JsonRequestBehavior.AllowGet);

        }
        public JsonResult CityList(int countryid = 0, int stateid = 0)
        {
            List<com.kuazoo.City> listc = countryservice.GetCityList(countryid).Result;
            List<MasterModel.City> newlistcat = new List<MasterModel.City>();
            foreach (var v in listc)
            {
                newlistcat.Add(new MasterModel.City() { CityId = v.CityId, CityName = v.Name });
            }
            IEnumerable<MasterModel.City> ienuList = newlistcat;
            return Json(ienuList, JsonRequestBehavior.AllowGet);

        }
        public JsonResult MerchantList()
        {
            List<com.kuazoo.Merchant> listc = merchantservice.GetMerchantList().Result;
            List<MerchantModel> newlistcat = new List<MerchantModel>();
            listc = listc.Where(x => x.LastAction != "5").ToList();
            foreach (var v in listc)
            {
                newlistcat.Add(new MerchantModel() { MerchantId = v.MerchantId, Name = v.Name });
            }
            IEnumerable<MerchantModel> ienuList = newlistcat;
            return Json(ienuList, JsonRequestBehavior.AllowGet);

        }
        public JsonResult InventoryItemTypeList()
        {
            List<com.kuazoo.InventoryItemType> listc = inventoryitemservice.GetInventoryItemTypeList().Result;
            List<InventoryItemModel.InventoryItemType> newlistcat = new List<InventoryItemModel.InventoryItemType>();
            foreach (var v in listc)
            {
                newlistcat.Add(new InventoryItemModel.InventoryItemType() { InventoryItemTypeId = v.InventoryItemTypeId, InventoryItemTypeName = v.InventoryItemTypeName });
            }
            IEnumerable<InventoryItemModel.InventoryItemType> ienuList = newlistcat;
            return Json(ienuList, JsonRequestBehavior.AllowGet);

        }
        public JsonResult TagList()
        {
            List<com.kuazoo.Tag> listtag = inventoryitemservice.GetTagList().Result;
            List<InventoryItemModel.Tag> newlisttag = new List<InventoryItemModel.Tag>();
            foreach (var v in listtag)
            {
                newlisttag.Add(new InventoryItemModel.Tag() { TagId = v.TagId, TagName = v.Name });
            }
            IEnumerable<InventoryItemModel.Tag> ienuList = newlisttag;
            return Json(ienuList, JsonRequestBehavior.AllowGet);

        }
        #endregion

    }
}
