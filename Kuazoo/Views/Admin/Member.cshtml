@model com.kuazoo.Models.MemberModel.Member
@{
    ViewBag.Title = "Member";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
<script type="text/javascript">
    $(document).ready(function () {
        changeverticalnav(8);
        $(document).tooltip();
    });
</script>
<div id="msgresult">
@if (ViewBag.msg != null && ViewBag.msg != "")
{
<div id="breadcrumbs">
    <div class="mainwrap">
        @if (ViewBag.msg == "1")
        {
            <div class="notif csuccess"><div class="notifwrap success"><strong>Success:</strong> New Member successfully created</div></div>
        }
        else if (ViewBag.msg == "3")
        {
            <div class="notif cerror"><div class="notifwrap error"><strong>Error:</strong> Failed Create New Member</div></div>
        }
        else if (ViewBag.msg == "11")
        {
            <div class="notif csuccess"><div class="notifwrap success"><strong>Success:</strong> Member updated successfully</div></div>
        }
        else if (ViewBag.msg == "33")
        {
            <div class="notif cerror"><div class="notifwrap error"><strong>Error:</strong> Failed Update Member</div></div>
        }
        @*<div class="notif cnotice"><div class="notifwrap notice"><strong>Notice:</strong> A</div></div>
        <div class="notif cwarning"><div class="notifwrap warning"><strong>Warning:</strong> A</div></div>
        <div class="notif cerror"><div class="notifwrap error"><strong>Error:</strong> A</div></div>
        <div class="notif csuccess"><div class="notifwrap success"><strong>Success:</strong> A</div></div>*@
    </div>
</div>
}
</div>
<div id="mainlist">
<div id="mainwrap">
    <h1>Member @*<a href="MemberAdd" class="addNewBtn">Add New</a>*@</h1>
    <div class="gridlist">
    @(Html.Kendo().Grid<com.kuazoo.Models.MemberModel.Member>()
        .Name("grid")
        .Columns(columns =>
        {
            columns.Bound(p => p.MemberStatus.MemberStatusId)
                .Title("Status")
                .ClientTemplate("#if(MemberStatus.MemberStatusId==1){#<div class='roundActive'></div>#}else if(MemberStatus.MemberStatusId==2){#<div class='roundInactive'></div>#}else{#<div class='roundSuspend'></div>#}#")
                .Width(90)
                .Filterable(filterable =>
                {
                    filterable.UI("getStatus");
                    filterable.Operators(op => op.ForString(o =>
                    {
                        o.Clear();
                        o.IsEqualTo("Is equal to");
                        o.IsNotEqualTo("Is not equal to");
                    }));
                });
            columns.Bound(p => p.FirstName).Title("First Name");
            columns.Bound(p => p.LastName).Title("Last Name");
            columns.Bound(p => p.Email);
            columns.Bound(p => p.Facebook.FacebookId)
                .Title("Login Methods")
                .ClientTemplate("#if(Facebook.FacebookId==0){#<img src='../Content/img/icon/icon-email.png' width=20px height=20px/>#}else{#<img src='../Content/img/icon/icon-fb.png' width=20px height=20px/>#}#")
                //.ClientTemplate("#if(Facebook.FacebookId==0){#<div class='imgemail'>l</div>#}else{#<div class='imgfb'>l</div>#}#") // cant display icon if without content  
                .Width(140)
                .Filterable(filterable =>
                {
                    filterable.UI("getLoginStatus");
                    filterable.Operators(op => op.ForString(o =>
                    {
                        o.Clear();
                        o.IsEqualTo("Is equal to");
                        o.IsNotEqualTo("Is not equal to");
                    }));
                });
            columns.Bound(p => p.Create).Format("{0:dd MMM yyyy}").Title("Created On");
            //columns.Bound(p => p.MemberStatus.MemberStatusName).Title("Active Status");
            columns.Bound(p => p.MemberStatus.MemberStatusId).ClientTemplate(
                "<a class='gridBtn' href='MemberView?MemberId=#=MemberId#'><span class='fa fa-eye' title='View' ></span></a>&nbsp;&nbsp;" +
                "|&nbsp;&nbsp;<a class='gridBtn' href='MemberEdit?MemberId=#=MemberId#'><span class='fa fa-pencil' title='Edit' ></span></a>&nbsp;&nbsp;"
                //"#if(MemberStatus.MemberStatusId!='3'){#" +
                //"|&nbsp;&nbsp;<a class='gridBtn k-button-icontext k-grid-delete'  href=''>Suspend</a>" +
                //"#}#"
                ).Title("Action").Filterable(filter => filter.Enabled(false));
        })
        .Editable(editable => editable.DisplayDeleteConfirmation("Do you want to suspend this Member?"))
        @*.ToolBar(toolbar =>
        {
            toolbar.Template(@<text>
                @(Html.Kendo().DropDownList()
                    .Name("LastAction")
                    .OptionLabel("All")
                    .DataTextField("Text")
                    .DataValueField("Value")
                    .AutoBind(false)
                    .Events(e => e.Change("changeLastAction"))
                    .BindTo(new List<SelectListItem>() {
                        new SelectListItem() {
                            Text = "Created",
                            Value = "1"
                        },
                        new SelectListItem() {
                            Text = "Updated",
                            Value = "3"
                        },
                        new SelectListItem() {
                            Text = "Deleted",
                            Value = "5"
                        }
                    })
                )
                    
            </text>);
        })*@
        .DataSource(dataSource => dataSource
            .Ajax()
            .PageSize(10)
            .Events(events => events.Error("error_handler"))
            .Read(read => read.Action("Member_Read", "Admin"))
            //.Destroy(destroy => destroy.Action("Member_Destroy", "Admin"))
            .Model(model =>
            {
                model.Id(p => p.MemberId);
            })
        )
        .Events(events=>events.DataBound("onDataBound").Change("onChange"))
        .Filterable(filterable => filterable
            .Extra(false)
                .Operators(operators => operators
                .ForString(str => str.Clear()
                    .StartsWith("Starts with")
                    .Contains("Contains")
                ))
        )
        .Pageable(page => page
            .Refresh(true)
            .PageSizes(true)
        )
        .Filterable()
        .Selectable()
        //.Scrollable(scr => scr.Height(280))
        .Sortable(sortable => sortable
            .AllowUnsort(true)
            .SortMode(GridSortMode.MultipleColumn))
        //.Groupable()
        .Resizable(resize => resize.Columns(true))
        .Reorderable(reorder => reorder.Columns(true))
    )
    </div>
</div>
</div>
<script type="text/javascript">
    $(window).load(function () {
        filtergrid();
    });
    var viewactive = 0;

    var statusValue = [{
        value: 1,
        text: "Active"
    }, {
        value: 2,
        text: "Inactive"
    }, {
        value: 3,
        text: "Suspended"
    }, {
        value: 4,
        text: "Pending"
    }, {
        value: 5,
        text: "Guest"
    }];
    function getStatus(e) {
        e.kendoDropDownList({
            dataSource: statusValue,
            dataTextField: "text",
            dataValueField: "value",
            optionLabel: "Select status"
        });
    }

    var FBstatus =
    [{
        value: 0,
        text: "Login by email"
    }];

    function getLoginStatus(e) {
        e.kendoDropDownList({
            dataSource: FBstatus,
            dataTextField: "text",
            dataValueField: "value",
            optionLabel: "Select login method"
        });
    }

    function onDataBound(e) {
        var data = this.dataSource.filter();
        if (data != null) {
            //console.log(data);
            document.location.hash = "";
            if (data.filters.length > 1) {
                for (var i = 1; i < data.filters.length; i++) {
                    console.log(data.filters[i].field + " " + data.filters[i].operator + " " + data.filters[i].value);
                    insertParam(data.filters[i].field, data.filters[i].value);
                }
            }
        }
        $(".gridBtn").click(function () {
            viewactive = 1;
            setTimeout(function () {
                viewactive = 0;
            }, 100);
        });
    }
    function onChange(e) {
        setTimeout(function () {
            if (viewactive == 0) {
                //var data = this.select();
                //console.log(data);
                var grid = $("#grid").data("kendoGrid");
                var selectedItem = grid.dataItem(grid.select());
                window.location = "MemberView?MemberId=" + selectedItem.MemberId;
            }
        }, 100);
    }
    function insertParam(key, value) {
        key = encodeURI(key); value = encodeURI(value);

        var kvp = document.location.hash.substr(1).split('&');
        //console.log(kvp);
        var i = kvp.length; var x; while (i--) {
            x = kvp[i].split('=');

            if (x[0] == key) {
                x[1] = value;
                kvp[i] = x.join('=');
                break;
            }
        }

        if (i < 0) { kvp[kvp.length] = [key, value].join('='); }

        //this will reload the page, it's likely better to store this until finished
        document.location.hash = kvp.join('&');
    }
    function filtergrid() {
        var param = []
        var kvp = document.location.hash.substr(1).split('&');
        for (var i = 0; i < kvp.length; i++) {
            if (kvp[i] != "") {
                var re = kvp[i].split('=');
                var array = { 'field': re[0], 'operator': 'contains', 'value': re[1] };
                param.push(array);
            }
        }
        if (param.length > 0) {
            //console.log(param);
            var grid = $('#grid').data('kendoGrid');
            grid.dataSource.filter(param);
            grid.refresh();
        }
    }
    //    function getQueryVariable(variable) {
    //        var query = window.location.search.substring(1);
    //        var vars = query.split("&");
    //        for (var i = 0; i < vars.length; i++) {
    //            var pair = vars[i].split("=");
    //            if (pair[0] == variable) { return pair[1]; }
    //        }
    //        return (false);
    //    }
    function changeLastAction() {
        var value = this.value(),
		 	 grid = $("#grid").data("kendoGrid");

        if (value) {
            grid.dataSource.filter({ field: "LastAction", operator: "eq", value: value });
        } else {
            grid.dataSource.filter({});
        }
    }

    function error_handler(e) {
        if (e.errors) {
            var result = '<div id="breadcrumbs"><div class="mainwrap">';
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message = this;
                    });
                }
            });
            if (message != "") {
                if (message == "1") {
                    result += '<div class="notif csuccess"><div class="notifwrap success"><strong>Success:</strong> Member suspended successfully</div></div>';
                }
                else if (message == "2") {
                    result += '<div class="notif cerror"><div class="notifwrap error"><strong>Error:</strong> Failed Suspend</div></div>';
                }
                else {
                    result += '<div class="notif cwarning"><div class="notifwrap warning"><strong>Error:</strong> ' + this + '</div></div>';
                }
                result += "</div></div>";
                $("#msgresult").html(result);
            }
            //alert(message);
            var grid = $('#grid').data('kendoGrid');
            grid.dataSource.read();
            grid.refresh();
        }
    }
</script>