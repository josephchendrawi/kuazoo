@model com.kuazoo.Models.InventoryItemModel.InventoryItem
@{
    ViewBag.Title = "Inventory Item";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
<script type="text/javascript">
    $(document).ready(function () {
        changeverticalnav(4);
        $(document).tooltip();
    });
</script>
<div id="msgresult">
@if (ViewBag.msg != null && ViewBag.msg != "")
{
<div id="breadcrumbs">
    <div class="mainwrap">
        @if (ViewBag.msg == "1")
        {
            <div class="notif csuccess"><div class="notifwrap success"><strong>Success:</strong> New inventory item successfully created</div></div>
        }
        else if (ViewBag.msg == "3")
        {
            <div class="notif cerror"><div class="notifwrap error"><strong>Error:</strong> Failed Create New Inventory Item</div></div>
        }
        else if (ViewBag.msg == "11")
        {
            <div class="notif csuccess"><div class="notifwrap success"><strong>Success:</strong> Inventory Item updated successfully</div></div>
        }
        else if (ViewBag.msg == "33")
        {
            <div class="notif cerror"><div class="notifwrap error"><strong>Error:</strong> Failed Update Inventory Item</div></div>
        }
        @*<div class="notif cnotice"><div class="notifwrap notice"><strong>Notice:</strong> A</div></div>
        <div class="notif cwarning"><div class="notifwrap warning"><strong>Warning:</strong> A</div></div>
        <div class="notif cerror"><div class="notifwrap error"><strong>Error:</strong> A</div></div>
        <div class="notif csuccess"><div class="notifwrap success"><strong>Success:</strong> A</div></div>*@
    </div>
</div>
}
</div>
<div id="mainlist">
<div id="mainwrap">
    <h1>Inventory Item <a href="FeaturedDeal" class="addNewBtn">Set Featured Deal</a><a href="InventoryItemAdd" class="addNewBtn">Add New</a></h1>
    <div class="gridlist">
    @(Html.Kendo().Grid<com.kuazoo.Models.InventoryItemModel.InventoryItem>()
        .Name("grid")
        .Columns(columns =>
        {
            columns.Bound(p => p.Flag)
                .Title("Status")
                .ClientTemplate("#if(Flag==true){#<div class='roundActive'></div>#}else{#<div class='roundInactive'></div>#}#")
                .Width(70)
                .Filterable(filterable =>
                 {
                     filterable.Messages(m => m.IsTrue("Active"));
                     filterable.Messages(m => m.IsFalse("Inactive"));
                 });
            columns.Bound(p => p.InventoryItemId).Title("Item ID");
            columns.Bound(p => p.Name).Title("Name");
            columns.Bound(p => p.InventoryItemTypeName).Title("Type");
            columns.Bound(p => p.MerchantName).Title("Merchant");
            //columns.Bound(p => p.CityName).Title("City");
            //columns.Bound(p => p.ExpireDate).Format("{0:dd MMM yyyy}").Title("Expiry Date");
            columns.Bound(p => p.PrizeName).Title("Prize");
            columns.Bound(p => p.Create).Format("{0:dd MMM yyyy}").Title("Created On");
            columns.Bound(p => p.Kuazooed).Title("Kuazooed");
            columns.Bound(p => p.Priority);
            columns.Bound(p => p.Popular);
            columns.Bound(p => p.Reviewed);
            //columns.Bound(p => p.LastAction).ClientTemplate(
            //     "<a class='gridBtn k-button-icontext k-grid-edit'  href=''><span class='fa fa-edit' title='Edit Inventory' ></span></a>"
            //     ).Title("").Filterable(filter => filter.Enabled(false));
            columns.Bound(p => p.LastAction).ClientTemplate(
                "<a class='gridBtn' href='InventoryItemView?InventoryItemId=#=InventoryItemId#'><span class='fa fa-eye' title='View' ></span></a>&nbsp;&nbsp;" +
                "#if(LastAction!='5'){#" +
                "|&nbsp;&nbsp;<a class='gridBtn' href='InventoryItemEdit?InventoryItemId=#=InventoryItemId#'><span class='fa fa-pencil' title='Edit' ></span></a>&nbsp;&nbsp;" +
                "|&nbsp;&nbsp;<a class='gridBtn k-button-icontext k-grid-delete'  href=''><span class='fa fa-archive' title='Archive' ></span></a>" +
                "|&nbsp;&nbsp;<a class='gridBtn'  onclick='Duplicate(#=InventoryItemId#)'><span class='fa fa-files-o' title='Duplicate' ></span></a>" +
                "#}#").Title("Action").Filterable(filter => filter.Enabled(false)).Width(200);
            columns.Command(command => command.Destroy()).Visible(false);//for make custom button work
            columns.Command(command => command.Edit()).Visible(true);//for make custom button work
        })
        .Editable(editable => editable.DisplayDeleteConfirmation("Do you want to archive this Inventory Item?"))
        @*.ToolBar(toolbar =>
        {
            toolbar.Template(@<text>
                @(Html.Kendo().DropDownList()
                    .Name("LastAction")
                    .OptionLabel("All")
                    .DataTextField("Text")
                    .DataValueField("Value")
                    .AutoBind(false)
                    .Events(e => e.Change("changeLastAction"))
                    .BindTo(new List<SelectListItem>() {
                        new SelectListItem() {
                            Text = "Created",
                            Value = "1"
                        },
                        new SelectListItem() {
                            Text = "Updated",
                            Value = "3"
                        },
                        new SelectListItem() {
                            Text = "Deleted",
                            Value = "5"
                        }
                    })
                )
                    
            </text>);
        })*@
        .DataSource(dataSource => dataSource
            .Ajax()
            .PageSize(10)
            .Events(events => events.Error("error_handler"))
            .Read(read => read.Action("InventoryItem_Read", "Admin"))
            .Destroy(destroy => destroy.Action("InventoryItem_Destroy", "Admin"))
            .Update(update => update.Action("InventoryItem_Update", "Admin"))
            .Model(model =>
            {
                model.Id(p => p.InventoryItemId);
                model.Field(p => p.Flag).Editable(false);
                model.Field(p => p.InventoryItemId).Editable(false);
                model.Field(p => p.Name).Editable(false);
                model.Field(p => p.InventoryItemTypeName).Editable(false);
                model.Field(p => p.MerchantName).Editable(false);
                model.Field(p => p.PrizeName).Editable(false);
                model.Field(p => p.Create).Editable(false);
                model.Field(p => p.Kuazooed).Editable(false);
                model.Field(p => p.LastAction).Editable(false);
            })
            //.Filter(filter=>filter.Add(p=>p.LastAction).IsNotEqualTo("5"))
        )
        //.Events(events => events.DataBound("onDataBound").Change("onChange"))
        .Filterable(filterable => filterable
            .Extra(false)
                .Operators(operators => operators
                .ForString(str => str.Clear()
                    .StartsWith("Starts with")
                    .Contains("Contains")
                ))
        )
        .Pageable(page => page
            .Refresh(true)
            .PageSizes(true)
        )
        .Selectable()
        .Filterable()
        //.Scrollable(scr => scr.Height(280))
        .Sortable(sortable => sortable
            .AllowUnsort(true)
            .SortMode(GridSortMode.MultipleColumn))
        //.Groupable()
        .Resizable(resize => resize.Columns(true))
        .Reorderable(reorder => reorder.Columns(true))
    )
    </div>
</div>
</div>
<script type="text/javascript">
    $(window).load(function () {
        //filtergrid();
    });
    var viewactive = 0;
    function onDataBound(e) {
        var data = this.dataSource.filter();
        if (data != null) {
            //console.log(data);
            document.location.hash = "";
            if (data.filters.length > 1) {
                for (var i = 1; i < data.filters.length; i++) {
                    console.log(data.filters[i].field + " " + data.filters[i].operator + " " + data.filters[i].value);
                    insertParam(data.filters[i].field, data.filters[i].value);
                }
            }
        }
        $(".gridBtn").click(function () {
            viewactive = 1;
            setTimeout(function () {
                viewactive = 0;
            }, 100);
        });
    }
    function onChange(e) {
        setTimeout(function () {
            if (viewactive == 0) {
                //                var data = this.select();
                //                console.log(data);
                var grid = $("#grid").data("kendoGrid");
                var selectedItem = grid.dataItem(grid.select());
                window.location = "InventoryItemView?InventoryItemId=" + selectedItem.InventoryItemId;
            }
        }, 100);
    }
    function insertParam(key, value) {
        key = encodeURI(key); value = encodeURI(value);

        var kvp = document.location.hash.substr(1).split('&');
        //console.log(kvp);
        var i = kvp.length; var x; while (i--) {
            x = kvp[i].split('=');

            if (x[0] == key) {
                x[1] = value;
                kvp[i] = x.join('=');
                break;
            }
        }

        if (i < 0) { kvp[kvp.length] = [key, value].join('='); }

        //this will reload the page, it's likely better to store this until finished
        document.location.hash = kvp.join('&');
    }
    function filtergrid() {
        var param = []
        var array = { 'field': 'LastAction', 'operator': 'neq', 'value': '5' };
        param.push(array);
        var kvp = document.location.hash.substr(1).split('&');
        for (var i = 0; i < kvp.length; i++) {
            if (kvp[i] != "") {
                var re = kvp[i].split('=');
                var array = { 'field': re[0], 'operator': 'contains', 'value': re[1] };
                param.push(array);
            }
        }
        if (param.length > 0) {
            //console.log(param);
            var grid = $('#grid').data('kendoGrid');
            grid.dataSource.filter(param);
            grid.refresh();
        }
    }
    function changeLastAction() {
        var value = this.value(),
		 	 grid = $("#grid").data("kendoGrid");

        if (value) {
            grid.dataSource.filter({ field: "LastAction", operator: "eq", value: value });
        } else {
            grid.dataSource.filter({});
        }
    }
    function Duplicate(id) {
        var r = confirm("Confirm duplicate Inventory Item?");
        if (r == true) {
            $.post("InventoryItem_Duplicate", { InventoryItemId: id }, function (data) {
                console.log(data);
                if (data) {
                    var result = '<div id="breadcrumbs"><div class="mainwrap">';
                    if (data == "1") {
                        result += '<div class="notif csuccess"><div class="notifwrap success"><strong>Success:</strong> Inventory Item duplicated successfully</div></div>';
                    }
                    else if (data == "2") {
                        result += '<div class="notif cerror"><div class="notifwrap error"><strong>Error:</strong> Failed duplicated</div></div>';
                    }
                    else {
                        result += '<div class="notif cwarning"><div class="notifwrap warning"><strong>Error:</strong> ' + data + '</div></div>';
                    }
                    result += "</div></div>";
                    $("#msgresult").html(result);
                    var grid = $('#grid').data('kendoGrid');
                    grid.dataSource.read();
                    grid.refresh();
                }
            });
        }
    }

    function error_handler(e) {
        if (e.errors) {
            var result = '<div id="breadcrumbs"><div class="mainwrap">';
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message = this;
                    });
                }
            });
            if (message != "") {
                if (message == "1") {
                    result += '<div class="notif csuccess"><div class="notifwrap success"><strong>Success:</strong> Inventory Item archived successfully</div></div>';
                }
                else if (message == "2") {
                    result += '<div class="notif cerror"><div class="notifwrap error"><strong>Error:</strong> Failed Delete</div></div>';
                }
                if (message == "3") {
                    result += '<div class="notif csuccess"><div class="notifwrap success"><strong>Success:</strong> Inventory Item\'s Priority has been updated successfully</div></div>';
                }
                else if (message == "4") {
                    result += '<div class="notif cerror"><div class="notifwrap error"><strong>Error:</strong> Inventory Item\'s Priority update failed</div></div>';
                }
                else {
                    result += '<div class="notif cwarning"><div class="notifwrap warning"><strong>Error:</strong> ' + this + '</div></div>';
                }
                result += "</div></div>";
                $("#msgresult").html(result);
            }
            //alert(message);
            var grid = $('#grid').data('kendoGrid');
            grid.dataSource.read();
            grid.refresh();
        }
    }
</script>